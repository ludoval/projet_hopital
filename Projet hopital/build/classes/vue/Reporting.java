/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vue;
import Controleur.Connexion;
import java.sql.*;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jfree.data.category.DefaultCategoryDataset;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.jdbc.JDBCCategoryDataset;
/**
 *
 * @author Mathieu
 */
public class Reporting extends javax.swing.JFrame {
    private static Connexion link;
    /**
     * Creates new form Reporting
     */
    public Reporting(Connexion l) {
        initComponents();
        link=l;
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Retour = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton_afficher_graphique = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Retour.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        Retour.setForeground(new java.awt.Color(255, 0, 51));
        Retour.setText("Retour");
        Retour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RetourActionPerformed(evt);
            }
        });
        getContentPane().add(Retour, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 110, 60));

        jComboBox1.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Répartition des salaires", "Répartition des infirmiers par service", "Répartition des docteurs par spécialité ", "Répartition des patients par docteur ", "Répartition des patients par service", "Salaire moyen par service", "Nombre moyen de chambre par service du batiment A", "Malade étant soigné par plus de trois spécialistes", "Rapport Infimier/Malade par service", "Docteur ayant au moins un malade hospitalisé" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 320, 510, -1));

        jButton_afficher_graphique.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jButton_afficher_graphique.setText("Afficher le graphique");
        jButton_afficher_graphique.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_afficher_graphiqueActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_afficher_graphique, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 317, 240, 40));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vue/Image Reporting.jpg"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 650));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RetourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RetourActionPerformed
        Accueil Page_accueil=new Accueil(link);
        Page_accueil.setVisible(true);
        this.setVisible(false);
        Page_accueil.setLocationRelativeTo(null);
    }//GEN-LAST:event_RetourActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        
            
    }//GEN-LAST:event_jComboBox1ActionPerformed
    /**
     * Méthode ActionPerformed qui permet d'afficher l'histogramme sélectionné dans le comboBox
     * @param evt 
     */
    private void jButton_afficher_graphiqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_afficher_graphiqueActionPerformed

        int numero_selec=jComboBox1.getSelectedIndex();
        switch(numero_selec){
            case 0:
                try{
                    //On stocke la requête permettant d'afficher la répartition des salaires
                    String query="SELECT salaire,COUNT(numero) AS effectif FROM infirmier GROUP BY salaire;";
                    //On instancie un objet de JDBCCategoryDataset qui nous permet de récupérer l'ensemble des données générées par la requête en paramètre
                    JDBCCategoryDataset dataset=new JDBCCategoryDataset(link.getConn(),query);
                    //"create BarChart" est une méthode de JFreeChart qui permet de créer un histogramme
                    JFreeChart chart=ChartFactory.createBarChart("Répartition des salaires","salaire","effectif", dataset,PlotOrientation.VERTICAL,false,true ,true);
                    ChartFrame frame=new ChartFrame("graphe",chart);
                    frame.setVisible(true);
                    frame.setSize(600,800);
                    frame.setLocationRelativeTo(null);
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null,e);
                }
                break;
                
            case 1: 
                try{
                    String query="SELECT nom,COUNT(numero) AS effectif FROM infirmier I, service SV WHERE SV.code=I.code_service GROUP BY nom;";
                    JDBCCategoryDataset dataset=new JDBCCategoryDataset(link.getConn(),query);
                    JFreeChart chart=ChartFactory.createBarChart("Répartition des infirmiers par service","service","infirmiers", dataset,PlotOrientation.VERTICAL,false,true ,true);
                    ChartFrame frame=new ChartFrame("",chart);
                    frame.setVisible(true);
                    frame.setSize(600,800);
                    frame.setLocationRelativeTo(null);
                    }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null,e);
                    }
                break;
            case 2:
                try{
                    String query="SELECT specialite,COUNT(numero) AS effectif FROM docteur GROUP BY specialite;";
                    JDBCCategoryDataset dataset=new JDBCCategoryDataset(link.getConn(),query);
                    JFreeChart chart=ChartFactory.createBarChart("Répartition des docteurs par spécialité","spécialité","docteur", dataset,PlotOrientation.VERTICAL,false,true ,true);
                    ChartFrame frame=new ChartFrame("",chart);
                    frame.setVisible(true);
                    frame.setSize(600,800);
                    frame.setLocationRelativeTo(null);
                    }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null,e);
                    }
                break;
        
            case 3:
                try{
                    String query="SELECT E.nom,COUNT(S.no_docteur) AS effectif FROM soigne S,employe E WHERE S.no_docteur=E.numero GROUP BY E.nom ORDER BY COUNT(S.no_docteur);";
                    JDBCCategoryDataset dataset=new JDBCCategoryDataset(link.getConn(),query);
                    JFreeChart chart=ChartFactory.createBarChart("Répartition des patients par docteur","patients","docteurs", dataset,PlotOrientation.VERTICAL,false,true ,true);
                    ChartFrame frame=new ChartFrame("",chart);
                    frame.setVisible(true);
                    frame.setSize(600,800);
                    frame.setLocationRelativeTo(null);
                    }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null,e);
                    }
                break;
            case 4:
                try{
                    String query="SELECT SV.nom,COUNT(H.no_malade) AS effectif FROM service SV,hospitalisation H WHERE H.code_service=SV.code GROUP BY SV.nom ORDER BY COUNT(H.no_malade);";
                    JDBCCategoryDataset dataset=new JDBCCategoryDataset(link.getConn(),query);
                    JFreeChart chart=ChartFactory.createBarChart("Répartition des patients par service","services","patients", dataset,PlotOrientation.VERTICAL,false,true ,true);
                    ChartFrame frame=new ChartFrame("",chart);
                    frame.setVisible(true);
                    frame.setSize(600,800);
                    frame.setLocationRelativeTo(null);
                    }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null,e);
                    }
                break;
            case 5:
                try{
                    String query="SELECT SV.code, AVG(I.salaire) AS salaire_moyen FROM service SV, infirmier I WHERE I.code_service=SV.code GROUP BY SV.code;";
                    JDBCCategoryDataset dataset=new JDBCCategoryDataset(link.getConn(),query);
                    JFreeChart chart=ChartFactory.createBarChart("Salaire moyen par service","service","salaire", dataset,PlotOrientation.VERTICAL,false,true ,true);
                    ChartFrame frame=new ChartFrame("",chart);
                    frame.setVisible(true);
                    frame.setSize(600,800);
                    frame.setLocationRelativeTo(null);
                    }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null,e);
                    }
                break;
            case 6:
                try{
                    String query="SELECT SV.code,AVG(nb_lits) AS nb_moyen_de_lits FROM service SV, chambre C WHERE C.code_service=SV.code AND SV.code='REA' OR SV.code='CHG' GROUP BY SV.code;";
                    JDBCCategoryDataset dataset=new JDBCCategoryDataset(link.getConn(),query);
                    JFreeChart chart=ChartFactory.createBarChart("Nombre moyen de chambre par service du batiment A","service du batiment A","Nombre moyen de chambre", dataset,PlotOrientation.VERTICAL,false,true ,true);
                    ChartFrame frame=new ChartFrame("",chart);
                    frame.setVisible(true);
                    frame.setSize(600,800);
                    frame.setLocationRelativeTo(null);
                    }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null,e);
                    }
                break;
            case 7:
                try{
                    String query="SELECT M.nom,M.prenom, COUNT(no_docteur) AS nb_docteur ,COUNT(DISTINCT specialite) AS nb_specialite FROM soigne S,malade M,docteur D WHERE s.no_malade=M.numero AND S.no_docteur=D.numero GROUP BY M.nom HAVING COUNT(no_docteur)>3; ";
                    JDBCCategoryDataset dataset=new JDBCCategoryDataset(link.getConn(),query);
                    JFreeChart chart=ChartFactory.createBarChart("Nombre de malade étant soigné par plus de trois spécialiste","docteur","Nombre de malade", dataset,PlotOrientation.VERTICAL,false,true ,true);
                    ChartFrame frame=new ChartFrame("",chart);
                    frame.setVisible(true);
                    frame.setSize(600,800);
                    frame.setLocationRelativeTo(null);
                    }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null,e);
                    }
                break;
            case 8:
                try{
                    String query="SELECT SV.nom, COUNT(DISTINCT I.numero)/COUNT(DISTINCT H.no_malade) AS rapport FROM service SV, infirmier I, hospitalisation H WHERE I.code_service=SV.code AND I.code_service=H.code_service GROUP BY SV.nom;";
                    JDBCCategoryDataset dataset=new JDBCCategoryDataset(link.getConn(),query);
                    JFreeChart chart=ChartFactory.createBarChart("Rapport Infimier/Malade par service","service","Rapport infirmier/malade", dataset,PlotOrientation.VERTICAL,false,true ,true);
                    ChartFrame frame=new ChartFrame("",chart);
                    frame.setVisible(true);
                    frame.setSize(600,800);
                    frame.setLocationRelativeTo(null);
                    }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null,e);
                    }
                break;
            case 9:
                try{
                    String query="SELECT E.numero, E.nom,E.prenom FROM employe E RIGHT JOIN soigne S ON E.numero=S.no_docteur RIGHT JOIN hospitalisation H ON S.no_malade=H.no_malade GROUP BY E.nom;";
                    JDBCCategoryDataset dataset=new JDBCCategoryDataset(link.getConn(),query);
                    JFreeChart chart=ChartFactory.createBarChart("Docteur ayant au moins un malade hospitalisé","service","Rapport infirmier/malade", dataset,PlotOrientation.VERTICAL,false,true ,true);
                    ChartFrame frame=new ChartFrame("",chart);
                    frame.setVisible(true);
                    frame.setSize(600,800);
                    frame.setLocationRelativeTo(null);
                    }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null,e);
                    }
                break;
                
                
            }
    }//GEN-LAST:event_jButton_afficher_graphiqueActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String [] args){
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reporting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Reporting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Reporting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reporting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Reporting(link).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Retour;
    private javax.swing.JButton jButton_afficher_graphique;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
