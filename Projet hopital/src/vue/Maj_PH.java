/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vue;
import Controleur.Connexion;
import Modele.*;
import java.sql.*;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
/**
 *
 * @author ludovic
 */
public class Maj_PH extends javax.swing.JFrame {
    private static Connexion link;
    /**
     * Creates new form Maj_PH
     */
    public Maj_PH(Connexion l) {
        initComponents();
        link=l;
        AffichePatientH();
    }
<<<<<<< HEAD
    
=======
    /**
     * crée uneliste de malade hospitalisés
     * @return cette même liste
     */
>>>>>>> 84b2909bae11a2bbe0c1c9adcc12cb26a231c7b1
    public ArrayList<MaladeHosp> getMaladeList(){
        ArrayList<MaladeHosp> list=new ArrayList<>();
        String query="SELECT DISTINCT M.numero, M.nom, M.prenom,M.adresse, M.tel, M.mutuelle, H.no_chambre as chambre, SV.code as nom_serv,E.numero as num_doc, E.nom as nom_doc, E.prenom as prenom_doc, E.tel as tel_doc, D.specialite FROM malade M,hospitalisation H,service SV, soigne S, docteur D, employe E WHERE M.numero=H.no_malade AND H.no_malade=S.no_malade AND S.no_docteur=D.numero AND D.numero=E.numero AND H.code_service=SV.code ORDER BY `M`.`numero` ASC";
        Statement st;
        ResultSet rs;
        try{
            st=link.getConn().createStatement();
            rs = st.executeQuery(query); 
            MaladeHosp malade;
            while(rs.next()){
                malade=new MaladeHosp(rs.getString("numero" ),rs.getString("nom"),rs.getString("prenom"),rs.getString("adresse"),rs.getString("tel"),rs.getString("mutuelle"),rs.getString("num_doc"),rs.getString("nom_doc"),rs.getString("prenom_doc"),rs.getString("tel_doc"),rs.getString("specialite"),rs.getString("chambre"),rs.getString("nom_serv"));
                list.add(malade);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }
<<<<<<< HEAD
    
=======
    /**
     * affiche un patient hospitalisé
     */
>>>>>>> 84b2909bae11a2bbe0c1c9adcc12cb26a231c7b1
    public void AffichePatientH(){
        
        ArrayList<MaladeHosp> list = getMaladeList();
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        Object[] row = new Object[13];
        for(int i = 0; i < list.size(); i++) {
           row[0]=list.get(i).getNumero();
           row[1]=list.get(i).getNom();
           row[2]=list.get(i).getPrenom();
           row[4]=list.get(i).getAdresse();
           row[3]=list.get(i).getTel();
           row[5]=list.get(i).getMutuelle();
           row[6]=list.get(i).getNumDoc();
           row[7]=list.get(i).getNomDoc();
           row[8]=list.get(i).getPrenomDoc();
           row[9]=list.get(i).getTel();
           row[10]=list.get(i).getSpecialite();
           row[11]=list.get(i).getNoChambre();
           row[12]=list.get(i).getService();

           model.addRow(row);
       }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Retour = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        idpat = new javax.swing.JTextField();
        nom = new javax.swing.JTextField();
        prenom = new javax.swing.JTextField();
        adresse = new javax.swing.JTextField();
        mutuelle = new javax.swing.JTextField();
        num_doc = new javax.swing.JTextField();
        nom_doc = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        Supprimer = new javax.swing.JButton();
        Modifier = new javax.swing.JButton();
        Ajouter = new javax.swing.JButton();
        prenom_doc = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        num_chambre = new javax.swing.JTextField();
        nom_serv = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        tel = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        spe = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Retour.setText("Retour");
        Retour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RetourActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        jLabel1.setText("Mise à jour des patients hospitalisés");

        jLabel2.setText("Id patient");

        jLabel3.setText("Nom");

        jLabel4.setText("Prénom");

        jLabel5.setText("Adresse");

        jLabel6.setText("Mutuelle");

        jLabel7.setText("Id docteur");

        jLabel8.setText("n°chambre");

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "numero", "nom", "prenom", "adresse", "tel", "mutuelle", "num_doc", "nom_doc", "prenom_doc", "tel_doc", "specialite", "chambre", "service"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(4).setResizable(false);
        }

        Supprimer.setText("Supprimer");
        Supprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SupprimerActionPerformed(evt);
            }
        });

        Modifier.setText("Modifier");
        Modifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModifierActionPerformed(evt);
            }
        });

        Ajouter.setText("Ajouter");
        Ajouter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AjouterActionPerformed(evt);
            }
        });

        jLabel9.setText("Service");

        jLabel10.setText("Nom doc");

        jLabel11.setText("Prenom doc");

        jLabel12.setText("Téléphone");

        jLabel13.setText("Spécialité");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(Retour)
                        .addGap(150, 150, 150)
                        .addComponent(jLabel1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(Ajouter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Modifier)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Supprimer))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel6))
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel2))
                                .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(nom, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                            .addComponent(adresse, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mutuelle, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(num_doc, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nom_doc, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(prenom_doc, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spe, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(num_chambre, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nom_serv, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(prenom, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(idpat))
                        .addGap(49, 49, 49)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 625, Short.MAX_VALUE)))
                .addGap(79, 79, 79))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Retour)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(idpat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(prenom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(adresse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mutuelle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(num_doc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nom_doc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(prenom_doc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(num_chambre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nom_serv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Supprimer)
                    .addComponent(Modifier)
                    .addComponent(Ajouter))
                .addContainerGap(67, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RetourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RetourActionPerformed
        Mise_A_Jour maj=new Mise_A_Jour(link);
        maj.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_RetourActionPerformed
    /**
     * 
<<<<<<< HEAD
     * @param num
=======
     * @param num id du patient
>>>>>>> 84b2909bae11a2bbe0c1c9adcc12cb26a231c7b1
     * @return si le malade existe dans la bdd
     * @throws SQLException pour la forme
     */
    public boolean MaladeExiste(String num) throws SQLException{
        String query="SELECT numero FROM malade WHERE numero="+num;
        
        link.requetes=link.remplirChampsRequete(query);
        
        if(link.requetes.isEmpty())return false;//le malade n'est pas présent dans la bdd
        else return true;
    }
<<<<<<< HEAD
    
=======
    /**
     * 
     * @param num id du docteur
     * @return vrai si le docteur en vraiment un false sinon
     * @throws SQLException s'il y a une erreur
     */
>>>>>>> 84b2909bae11a2bbe0c1c9adcc12cb26a231c7b1
    public boolean DocExiste(String num) throws SQLException{
        String query="SELECT numero FROM docteur WHERE numero="+num;
   
        link.requetes=link.remplirChampsRequete(query);
        
        if(link.requetes.isEmpty())return false;//le doc n'est pas présent dans la bdd
        else return true;
    }
<<<<<<< HEAD
=======
    /**
     * ajoute le malade dans hospitalisation, soigne (et malade au besoin)
     * @param evt 
     */
>>>>>>> 84b2909bae11a2bbe0c1c9adcc12cb26a231c7b1
    private void AjouterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AjouterActionPerformed
        String query1,query2,query3;
        ArrayList<Object> lit;
        if(idpat.getText().equals("")||nom.getText().equals("")||prenom.getText().equals("")
                ||adresse.getText().equals("")||tel.getText().equals("")||mutuelle.getText().equals("")||
                num_doc.getText().equals("")||nom_serv.getText().equals("")||num_chambre.getText().equals("")){
            JOptionPane.showMessageDialog(null,"L'un des champs est vide");
        }else{
            try {
                //vérif malade existant
                if(!MaladeExiste(idpat.getSelectedText())){
                    query3="INSERT INTO malade(numero,nom,prenom,adresse,tel,mutuelle) VALUES("+idpat.getText()+",'"+nom.getText()+"','"+prenom.getText()+"','"+adresse.getText()+"','"+tel.getText()+"','"+mutuelle.getText()+"')";
                    executerSQLquery(query3,"Ajouté dans la table malade");
                }
                query1="INSERT INTO soigne(no_docteur,no_malade) VALUES ("+idpat.getText()+","+num_doc.getText()+");"; 
                executerSQLquery(query1,"Ajouté dans la table soigne");
                lit=link.remplirChampsRequete("SELECT nb_lits "+ "FROM chambre "+"WHERE code_service='"+nom_serv.getText()+"' AND no_chambre="+num_chambre.getText()+";");
                
                query2="INSERT INTO hospitalisation(no_malade,code_service,no_chambre,lit) VALUES ("+idpat.getText()+",'"+nom_serv.getText()+"',"+num_chambre.getText()+","+lit.get(0)+");";
                executerSQLquery(query2,"Ajouté dans la table hospitalise");
            } catch (SQLException ex) {
                Logger.getLogger(Maj_PH.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_AjouterActionPerformed
<<<<<<< HEAD

=======
    /**
     * modifie les tables hospitalisation et malade 
     * @param evt "modifier" pressed
     */
>>>>>>> 84b2909bae11a2bbe0c1c9adcc12cb26a231c7b1
    private void ModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModifierActionPerformed
       //vérifier les champs 
        String query1,query2,query3;
        ArrayList<Object> lit,doc;
        if(idpat.getText().equals("")||nom.getText().equals("")||prenom.getText().equals("")
                ||adresse.getText().equals("")||tel.getText().equals("")||mutuelle.getText().equals("")||
                num_doc.getText().equals("")||nom_serv.getText().equals("")||num_chambre.getText().equals("")){
            JOptionPane.showMessageDialog(null,"L'un des champs est vide");
        }else{
            try {
                if(MaladeExiste(idpat.getText())&&DocExiste(num_doc.getText())){//vérif malade&doc existant
                    //soigne ne peut pas être modifié car elle contient deux attributs primaire
                
                    lit=link.remplirChampsRequete("SELECT nb_lits "+ "FROM chambre "+"WHERE code_service='"+nom_serv.getText()+"' AND no_chambre="+num_chambre.getText()+";");
                    query2="UPDATE `hospitalisation` SET `code_service`='"+nom_serv.getText()+"',`no_chambre`='"+num_chambre.getText()+"',`lit`='"+lit.get(0)+"' WHERE `no_malade`='"+idpat.getText()+"';";
                    executerSQLquery(query2,"Table hospitalise modifiée");//done
                
                    query3="UPDATE malade SET `nom`='"+nom.getText()+"',`prenom`='"+prenom.getText()+"',`adresse`='"+adresse.getText()+"',`tel`='"+tel.getText()+"',`mutuelle`='"+mutuelle.getText()+"' WHERE `numero`="+idpat.getText()+";";
                    executerSQLquery(query3,"Table malade modifiée");
                }else{//modif
                JOptionPane.showMessageDialog(null,"Ce malade ou ce docteur n'éxiste pas");
                }
            } catch (SQLException ex) {
                Logger.getLogger(Maj_PH.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_ModifierActionPerformed
<<<<<<< HEAD

=======
    /**
     * supression dans malade, hospitalisation et soigne
     * @param evt "supprimer" pressed
     */
>>>>>>> 84b2909bae11a2bbe0c1c9adcc12cb26a231c7b1
    private void SupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SupprimerActionPerformed
        //vérifier les champs 
        String query1,query2,query3,query;
        ArrayList<Object> lit,mal,doc;
        
        if(idpat.getText().equals("")||nom.getText().equals("")||prenom.getText().equals("")
                ||adresse.getText().equals("")||tel.getText().equals("")||mutuelle.getText().equals("")||
                num_doc.getText().equals("")||nom_serv.getText().equals("")||num_chambre.getText().equals("")){
            JOptionPane.showMessageDialog(null,"L'un des champs est vide");
        }else{
            try {
                if(MaladeExiste(idpat.getText())&&DocExiste(num_doc.getText())){//vérif malade&doc existant
                    //soigne ne peut pas être modifié car elle contien deux attributs primaire
                 
                    mal=link.remplirChampsRequete("SELECT no_malade FROM soigne WHERE no_malade="+idpat.getText()+" AND no_docteur="+num_doc.getText()+";");
                    doc=link.remplirChampsRequete("SELECT no_docteur FROM soigne WHERE no_malade="+idpat.getText()+" AND no_docteur="+num_doc.getText()+";");
                    
                    query1="DELETE FROM soigne WHERE no_malade="+mal.get(0)+" AND no_docteur="+doc.get(0)+";";
                    
                    
                    lit=link.remplirChampsRequete("SELECT nb_lits "+ "FROM chambre "+"WHERE code_service='"+nom_serv.getText()+"' AND no_chambre="+num_chambre.getText()+";");
                    query2="DELETE FROM `hospitalisation` WHERE `no_malade`='"+idpat.getText()+"';";
                    executerSQLquery(query1,query2,"Champs supprimés de soigne et hospitalisation");
                    query3="DELETE FROM malade WHERE numero="+mal.get(0)+";";
                    executerSQLquery(query3,"Supprimé de malade");
                
                }else{//modif
                JOptionPane.showMessageDialog(null,"Ce malade ou ce docteur n'éxiste pas");
                }
            } catch (SQLException ex) {
                Logger.getLogger(Maj_PH.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_SupprimerActionPerformed
<<<<<<< HEAD

=======
    /**
     * récupère les infos de la JTable
     * @param evt clique sur le tableau
     */
>>>>>>> 84b2909bae11a2bbe0c1c9adcc12cb26a231c7b1
    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        int i=table.getSelectedRow();
        TableModel model=table.getModel();
        idpat.setText(model.getValueAt(i,0).toString());
        nom.setText(model.getValueAt(i,1).toString());
        prenom.setText(model.getValueAt(i, 2).toString());
        adresse.setText(model.getValueAt(i, 3).toString());
        tel.setText(model.getValueAt(i,4).toString());
        mutuelle.setText(model.getValueAt(i,5).toString());
        num_doc.setText(model.getValueAt(i,6).toString());
        nom_doc.setText(model.getValueAt(i,7).toString());
        prenom_doc.setText(model.getValueAt(i,8).toString());
        spe.setText(model.getValueAt(i,10).toString());
        num_chambre.setText(model.getValueAt(i,11).toString());
        nom_serv.setText(model.getValueAt(i,12).toString());
    }//GEN-LAST:event_tableMouseClicked
<<<<<<< HEAD
    //vérification de la modif & éxecution
=======
    /**
     * exectue et vérifie le bon fonctionnement d'une requête
     * @param query requête
     * @param message information sur le déroulement de la requête
     */
>>>>>>> 84b2909bae11a2bbe0c1c9adcc12cb26a231c7b1
    public void executerSQLquery(String query,String message){
       Statement st;
       try{
           st=link.getConn().createStatement();
           if(st.executeUpdate(query)== 1)
           {
               DefaultTableModel model = (DefaultTableModel)table.getModel();
               model.setRowCount(0);
               AffichePatientH();
               
               JOptionPane.showMessageDialog(null,message);
           }else{
               JOptionPane.showMessageDialog(null, message);
           }
       }catch(Exception ex){
           ex.printStackTrace();
       }
    }
<<<<<<< HEAD
=======
    /**
     * même chose mais pour deux requêtes
     * @param query1
     * @param query2
     * @param message 
     */
>>>>>>> 84b2909bae11a2bbe0c1c9adcc12cb26a231c7b1
    public void executerSQLquery(String query1,String query2,String message){
       Statement st;
       try{
           st=link.getConn().createStatement();
           if(st.executeUpdate(query1)== 1&&st.executeUpdate(query2)== 1)
           {
               DefaultTableModel model = (DefaultTableModel)table.getModel();
               model.setRowCount(0);
               AffichePatientH();
               
               JOptionPane.showMessageDialog(null,message);
           }else{
               JOptionPane.showMessageDialog(null,message);
           }
       }catch(Exception ex){
           ex.printStackTrace();
       }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Maj_PH.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Maj_PH.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Maj_PH.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Maj_PH.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Maj_PH(link).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Ajouter;
    private javax.swing.JButton Modifier;
    private javax.swing.JButton Retour;
    private javax.swing.JButton Supprimer;
    private javax.swing.JTextField adresse;
    private javax.swing.JTextField idpat;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField mutuelle;
    private javax.swing.JTextField nom;
    private javax.swing.JTextField nom_doc;
    private javax.swing.JTextField nom_serv;
    private javax.swing.JTextField num_chambre;
    private javax.swing.JTextField num_doc;
    private javax.swing.JTextField prenom;
    private javax.swing.JTextField prenom_doc;
    private javax.swing.JTextField spe;
    private javax.swing.JTable table;
    private javax.swing.JTextField tel;
    // End of variables declaration//GEN-END:variables
}
